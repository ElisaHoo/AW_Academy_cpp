#include <iostream>
#include <vector>
#include <algorithm>
#include <random>

/* Create two std::vector<int> and fill them with random amount of 
 * random numbers. Use std::set_intersection to find common elements 
 * between them.*/

void find_common_elements(std::vector<int> v1, std::vector<int> v2) {
    std::sort(v1.begin(), v1.end());
    std::sort(v2.begin(), v2.end());

    std::vector<int> common_elements;
    std::set_intersection(v1.begin(), v1.end(), v2.begin(), v2.end(),
                          std::back_inserter(common_elements));
    
    for(int num : common_elements) {
        std::cout << num << " ";
    }
    std::cout << "\n";
}

std::vector<int> generate_random_vector() {
    std::vector<int> v;
    std::random_device rd;  // A seed source for the random number engine
    std::mt19937 gen(rd());  // Mersenne_twister_engine seeded with rd()
    std::uniform_int_distribution<> distrib(1, 100);  //numbers between 1-100
    // Use distrib to transform the random unsigned int
    // generated by gen into an int in [1, 100]
    for (int n = 0; n != 101; ++n) {  // 1-100 elements
        v.push_back(distrib(gen));
        std::cout << v[n] << " ";
    }
    std::cout << "\n\n\n";
    return v;
}

int main() {
    // Create two vectors with random size and elements
    std::vector<int> v1 = generate_random_vector();
    std::vector<int> v2 = generate_random_vector();

    find_common_elements(v1, v2);

    return 0;
}