#include "../includes/weather.hpp"

int generate_random_value(int starting_value, int ending_value) {
    std::vector<int> v;
    std::random_device rd;  // A seed source for the random number engine
    std::mt19937 gen(rd());  // Mersenne_twister_engine seeded with rd()
    std::uniform_int_distribution<> distrib(starting_value, ending_value);
    // Use distrib to transform the random unsigned int
    // generated by gen into an int in [starting_value & ending_value parameters]
    return distrib(gen);
}

int generate_temperature(int previous_temp) {
    while(true) {
        // Generate temperature, that is max 3 degrees higher or lower than previously generated temperature
        int temperature{generate_random_value((previous_temp - 3), previous_temp +3)};
        // And return the value if it's realistic
        if (check_temperature_is_valid(temperature)) {
            return temperature;
        }
    }
}

int generate_humidy(int previous_humidy) {
    while (true) {
        // Generate humidy, that is max 10 % higher or lower than previously generated humidy
        int humidy{generate_random_value((previous_humidy - 10), previous_humidy + 10)};
        // And return the value if it's realistic
        if (check_humidy_is_valid(humidy)) {
            return humidy;
        }
    }  
}

int generate_wind_speed(int previous_wind_speed) {
    while (true) {
        // Generate wind speed, that is max 2 m/s higher or lower than previously generated wind speed
        int speed{generate_random_value(previous_wind_speed - 2, previous_wind_speed + 2)};
        if (check_wind_speed_is_valid(speed)) {
            return speed;
        }
    }
}

int generate_pressure(int previous_pressure) {
    while (true) {
        // Generate pressure, that is 2 hPa higher or lower than previously generated pressure
        int pressure{generate_random_value(previous_pressure - 2, previous_pressure + 2)};
        if (check_pressure_is_valid(pressure)) {
            return pressure;
        }
    }
}

int check_choice_is_valid(int choice) {
    // Check if user didn't input number -> cin fails
    if(!std::cin) { 
        clear_failed_cin();
        while (true) {  // Keep asking valid input
            std::cout << "\nInvalid input! Please try again.\n";
            std::cout << "Enter a choice from 1 to 4: ";
            std::cin >> choice;
            if(!std::cin) {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            } else {
                break;
            }
        }
    }
    return choice;
}

void clear_failed_cin() {
    if(!std::cin) { // User didn't input number -> cin fails
        std::cin.clear();  // clear cin's failbit
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); //skip bad input
    }
}

std::vector<std::string> read_all_weather_data() {
    std::ifstream read_file("weather_readings.csv");
    if (!read_file.is_open()) {
        throw std::runtime_error("Couldn't open the file!\n");
    }
    std::vector<std::string> file_data{};
    std::string line{};
    std::string value{};
    std::istringstream iss{};
    // Read from the file value by value and push into vector
    while (!read_file.eof()) {  // Loop until end of the file
        std::getline(read_file, line);  // Get line from a file and store it to line-variable
        iss.clear();  // Clear out state from previous iteration of the loop
        iss.str(line);  // Copy line-string for iss to stream from
        while (iss.good()) {  // While the state of the string stream is good
            iss >> value;  // Extract a value from line, which iss is set up to stream
            file_data.push_back(value);  // push the value to vector
        }
    }
    read_file.close();
    return file_data;
}

std::vector<std::string> read_previous_readings() {
    // Get all readings from a file
    std::vector<std::string> file_data{read_all_weather_data()};
    std::vector<std::string> previous_readings{};
    // Get previous readings = last four values from a vector
    for (int i = (file_data.size() - 4); i < file_data.size(); ++i) {
        previous_readings.push_back(file_data[i]);
    }
    return previous_readings;
}
void write_readings_into_file(int temperature, int humidy, int wind_speed, int pressure) {
    std::ofstream write_file("weather_readings.csv", std::ios::app);
    // Get the path to the file
    std::filesystem::path file = "weather_readings.csv";
    std::filesystem::path weather_readings = std::filesystem::current_path() / file; 
    if (!write_file.is_open()) {
        throw std::runtime_error("Couldn't open the file!");
    }
    // If there is already data in the file, write new line
    if (std::filesystem::file_size(weather_readings) > 0) {
        write_file << "\n";
    }
    // Write the values in the file
    write_file << temperature << " " << humidy << " " << wind_speed << " " << pressure;
    write_file.close();
}

bool check_temperature_is_valid(int temperature) {
    return (temperature > -95 && temperature < 65);
}

bool check_humidy_is_valid(int humidy) {
    return (humidy >= 0 && humidy <= 100);
}

bool check_wind_speed_is_valid(int speed) {
    return (speed >= 0 && speed < 114);
}

bool check_pressure_is_valid(int pressure) {
    return (pressure > 334 && pressure < 1014);
}